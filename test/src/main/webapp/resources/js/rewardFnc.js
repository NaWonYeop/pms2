//블록체인 연결
console.log('starting...');

//web3 = new Web3(window.ethereum); //메타마스크
//web3 = new Web3(new Web3.providers.HttpProvider('HTTP://127.0.0.1:8545')); // 메타마스크 연결
web3 = new Web3(window.web3.currentProvider);

if (typeof web3 !== 'undefined') {
        // Mist/MetaMask의 프로바이더 사용
        web3 = new Web3(window.web3.currentProvider);
        //alert('web3가 연결되었습니다.');
    } else {
        // 사용자가 Metamask를 설치하지 않은 경우에 대해 처리
        // 사용자들에게 Metamask를 설치하라는 등의 메세지를 보여줄 것
         web3 = new Web3(new Web3.providers.HttpProvider("http://127.0.0.1:8545"));
 }

if (web3)
   console.log('connected');
else
   console.log('not connected');

//첫번째 계정 조회
let account;
web3.eth.getAccounts(function (err, accs) {
    if (err != null) {
      console.log('There was an error fetching your accounts.')
      return
    }
    if (accs.length === 0) {
      console.log("Couldn't get any accounts! ")
      return
    }
    account = accs[0];
    console.log(account);

})

// 여기에 우리가 만든 컨트랙트에 접근하는 방법을 제시한다:
/* abi generated by the compiler */
var abi = [
	{
		"constant": false,
		"inputs": [
			{
				"name": "_cId",
				"type": "uint256"
			},
			{
				"name": "_getAc",
				"type": "address"
			}
		],
		"name": "buyAry",
		"outputs": [],
		"payable": true,
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_cId",
				"type": "uint256"
			}
		],
		"name": "EndAry",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_cId",
				"type": "uint256"
			}
		],
		"name": "refund",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"name": "myMap",
		"outputs": [
			{
				"name": "getAc",
				"type": "address"
			},
			{
				"name": "amount",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	}
];

//var NFTAuctionContract = web3.eth.contract(abi)

var contractAddress = "0x5Ce3f2F7694a7596bAcC9B94B63ab3d6451D1d53"; /* our contract address on Ethereum after deploying */

var solidityRewardFnc = new web3.eth.Contract(abi, contractAddress);//rewardFncContract.at(contractAddress)
// `rewardFnc`는 우리 컨트랙트의 public 함수와 이벤트에 접근할 수 있다.
